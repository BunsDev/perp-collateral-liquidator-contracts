{
  "address": "0xa3C66d713211e34D9506841D1600A402a21fcD05",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultArg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxSettlementTokenSpent",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "minSettlementTokenProfit",
          "type": "int256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct Liquidator.Hop",
          "name": "pathHead",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "pathTail",
          "type": "bytes"
        }
      ],
      "name": "flashLiquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getMaxProfitableCollateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "targetCollateral",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "collateralList",
          "type": "address[]"
        }
      ],
      "name": "getMaxProfitableCollateralFromCollaterals",
      "outputs": [
        {
          "internalType": "address",
          "name": "targetCollateral",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount0Delta",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1Delta",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV3SwapCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1bcd9782cbdcaa59c3432c00af5b0b263c295a90799dc38bfee49a6254e59146",
  "receipt": {
    "to": null,
    "from": "0x9E9DFaCCABeEcDA6dD913b3685c9fe908F28F58c",
    "contractAddress": "0xa3C66d713211e34D9506841D1600A402a21fcD05",
    "transactionIndex": 0,
    "gasUsed": "1889499",
    "logsBloom": "0x
    "blockHash": "0xc68b43ad40bb4b8c8b706a6f6914ecfef83fe147975b7ab4698d2590f1cac1f2",
    "transactionHash": "0x1bcd9782cbdcaa59c3432c00af5b0b263c295a90799dc38bfee49a6254e59146",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1453624,
        "transactionHash": "0x1bcd9782cbdcaa59c3432c00af5b0b263c295a90799dc38bfee49a6254e59146",
        "address": "0xa3C66d713211e34D9506841D1600A402a21fcD05",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009e9dfaccabeecda6dd913b3685c9fe908f28f58c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc68b43ad40bb4b8c8b706a6f6914ecfef83fe147975b7ab4698d2590f1cac1f2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1453624,
        "transactionHash": "0x1bcd9782cbdcaa59c3432c00af5b0b263c295a90799dc38bfee49a6254e59146",
        "address": "0x3e22e37Cb472c872B5dE121134cFD1B57Ef06560",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a3c66d713211e34d9506841d1600a402a21fcd05",
          "0x000000000000000000000000b0ff090d04c268abb26450ba749f0497efa9bb7c"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0xc68b43ad40bb4b8c8b706a6f6914ecfef83fe147975b7ab4698d2590f1cac1f2"
      }
    ],
    "blockNumber": 1453624,
    "cumulativeGasUsed": "1889499",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB0ff090d04c268ABb26450ba749f0497EFA9Bb7C",
    "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
  ],
  "solcInputHash": "722582f722e19d53aff3897efde91fb5",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultArg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSettlementTokenSpent\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"minSettlementTokenProfit\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct Liquidator.Hop\",\"name\":\"pathHead\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"pathTail\",\"type\":\"bytes\"}],\"name\":\"flashLiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getMaxProfitableCollateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"targetCollateral\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"collateralList\",\"type\":\"address[]\"}],\"name\":\"getMaxProfitableCollateralFromCollaterals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"targetCollateral\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"flashLiquidate(address,uint256,int256,(address,uint24,address),bytes)\":{\"params\":{\"maxSettlementTokenSpent\":\"The maximum amount of the settlement token                                should be paid to the Vault\",\"minSettlementTokenProfit\":\"The minimum amount of the settlement token                                 should be earned (negative = allow liquidation at a loss)\",\"pathHead\":\"Path for swapping tokens                 For single swaps, it's somewhat like { tokenIn: eth, fee, tokenOut: usdc }                 For multihop swaps, it's somewhat like { tokenIn: perp, fee, tokenOut: eth }\",\"pathTail\":\"To fulfill multihop swaps, this is the path after `pathHead`                 For single swaps, directly pass `0x`                 For multihop swaps, it's somewhat like `abi.encodePacked(eth, fee, usdc)`\",\"trader\":\"The address of the liquidatable trader\"}},\"getMaxProfitableCollateral(address)\":{\"params\":{\"trader\":\"The address of the liquidatable trader\"},\"returns\":{\"targetCollateral\":\"The most profitable collateral from the liquidatable trader\"}},\"getMaxProfitableCollateralFromCollaterals(address,address[])\":{\"params\":{\"collateralList\":\"Specific collateral list\",\"trader\":\"The address of the liquidatable trader\"},\"returns\":{\"targetCollateral\":\"The most profitable collateral from the liquidatable trader\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"flashLiquidate(address,uint256,int256,(address,uint24,address),bytes)\":{\"notice\":\"Liquidate tradedr's collateral by using flash swap on uniswap v3\"},\"getMaxProfitableCollateral(address)\":{\"notice\":\"Get the most profitable collateral from the liquidatable trader\"},\"getMaxProfitableCollateralFromCollaterals(address,address[])\":{\"notice\":\"Get the most profitable collateral from the liquidatable trader and only accept specific collaterals\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Liquidator.sol\":\"Liquidator\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"@perp/curie-contract/contracts/interface/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IVault {\\n    /// @notice Emitted when trader deposit collateral into vault\\n    /// @param collateralToken The address of token that was deposited\\n    /// @param trader The address of trader\\n    /// @param amount The amount of token that was deposited\\n    event Deposited(address indexed collateralToken, address indexed trader, uint256 amount);\\n\\n    /// @notice Emitted when trader withdraw collateral from vault\\n    /// @param collateralToken The address of token that was withdrawn\\n    /// @param trader The address of trader\\n    /// @param amount The amount of token that was withdrawn\\n    event Withdrawn(address indexed collateralToken, address indexed trader, uint256 amount);\\n\\n    /// @notice Emitted when trader's collateral is liquidated\\n    /// @param collateralToken The address of token that was liquidated\\n    /// @param trader The address of trader\\n    /// @param collateralTokenAmount The amount of collateral token that was liquidated\\n    /// @param repayAmountX10_D The amount of settlement token that was repaid\\n    /// @param insuranceFundFeeX10_D The amount of insurance fund fee that was paid\\n    event CollateralLiquidated(\\n        address indexed collateralToken,\\n        address indexed trader,\\n        address indexed liquidator,\\n        uint256 collateralTokenAmount,\\n        uint256 repayAmountX10_D,\\n        uint256 insuranceFundFeeX10_D\\n    );\\n\\n    /// @notice Deposit collateral into vault\\n    /// @dev once multi-collateral is implemented, the token is not limited to settlementToken\\n    /// @param token The address of the token to deposit\\n    /// @param amountX10_D The amount of the token to deposit in decimals D (D = _decimals)\\n    function deposit(address token, uint256 amountX10_D) external;\\n\\n    /// @notice Deposit the collateral token for other account\\n    /// @param to The address of the account to deposit to\\n    /// @param token The address of collateral token\\n    /// @param amountX10_D The amount of the token to deposit in decimals D (D = _decimals)\\n    function depositFor(\\n        address to,\\n        address token,\\n        uint256 amountX10_D\\n    ) external;\\n\\n    /// @notice Withdraw collateral from vault\\n    /// @dev once multi-collateral is implemented, the token is not limited to settlementToken\\n    /// @param token The address of the token sender is going to withdraw\\n    /// @param amountX10_D The amount of the token to withdraw in decimals D (D = _decimals)\\n    function withdraw(address token, uint256 amountX10_D) external;\\n\\n    /// @notice Liquidate trader's collateral by given settlement token amount\\n    /// @param trader The address of trader\\n    /// @param settlementTokenAmountX10_D The amount of settlement token liquidator needs to transfer to Vault\\n    function liquidateCollateralExactInput(\\n        address trader,\\n        address token,\\n        uint256 settlementTokenAmountX10_D\\n    ) external returns (uint256 collateralTokenAmount);\\n\\n    /// @notice Liquidate trader's collateral by given collateral token amount\\n    /// @param trader The address of trader\\n    /// @param collateralTokenAmount The amount of collateral token, with decimals same as the collateral token\\n    function liquidateCollateralExactOutput(\\n        address trader,\\n        address token,\\n        uint256 collateralTokenAmount\\n    ) external returns (uint256 settlementTokenAmountX10_D);\\n\\n    /// @notice Get the specified trader's settlement token balance (without pending fee,\\n    ///         funding payment and owed realized PnL)\\n    /// @dev The function is equivalent to `getBalanceByToken(settlementToken, trader)`\\n    ///      We keep this function solely for backward-compatibility with the older single-collateral system.\\n    ///      In practical applications, the developer might want to use `getSettlementBalance()` instead\\n    ///      because the latter includes pending fee, funding payment etc.\\n    ///      and therefore more accurately reflects a trader's settlement (ex. USDC) balance\\n    /// @return balance The balance amount\\n    function getBalance(address trader) external view returns (int256 balance);\\n\\n    /// @notice Get the balance in vault of specified collateral token of specified trader\\n    /// @param trader The address of the trader\\n    /// @param token The address of the collateral token\\n    /// @return balance The balance amount\\n    function getBalanceByToken(address trader, address token) external view returns (int256 balance);\\n\\n    /// @notice Get the specified trader's settlement value (with pending fee, funding payment,\\n    ///         owed realized PnL and unrealized PnL)\\n    /// @dev Note the difference between `_getSettlementBalance()`, `getSettlementTokenValue()` and `getBalance()`.\\n    ///      They are all settlement token balances but with or without\\n    ///      pending fee, funding payment, owed realized PnL, unrealized PnL, respectively\\n    ///      In practical applications, we use `getSettlementTokenValue()` to get the trader's debt (if < 0)\\n    /// @return balance The balance amount\\n    function getSettlementTokenValue(address trader) external view returns (int256);\\n\\n    /// @notice Get account value (denominated in settlement token) of the specified trader\\n    /// @dev in settlement token's decimals\\n    /// @param trader The address of the trader\\n    /// @return accountValue account value\\n    function getAccountValue(address trader) external view returns (int256);\\n\\n    /// @notice Get free collateral value (denominated in settlement token) of the specified trader\\n    /// @param trader The address of the trader\\n    /// @return freeCollateral the value (denominated in settlement token) of free collateral available\\n    ///         for withdraw or opening new positions or orders)\\n    function getFreeCollateral(address trader) external view returns (uint256 freeCollateral);\\n\\n    /// @notice Get free collateral amount of specified collateral token of a specified trader\\n    /// @param trader The address of the trader\\n    /// @param token The address of the collateral token\\n    /// @return freeCollateral amount of that token\\n    function getFreeCollateralByToken(address trader, address token) external view returns (uint256 freeCollateral);\\n\\n    /// @notice Get free collateral amount of specified trader and collateral ratio\\n    /// @dev There are three configurations for different insolvency risk tolerances: **conservative, moderate,\\n    /// aggressive**, we will start with the **conservative** one and gradually move to aggressive to\\n    /// increase capital efficiency\\n    /// @param trader The address of the trader\\n    /// @param ratio The margin requirement ratio, imRatio or mmRatio\\n    /// @return freeCollateralByRatio freeCollateral, by using the input margin requirement ratio; can be negative\\n    function getFreeCollateralByRatio(address trader, uint24 ratio)\\n        external\\n        view\\n        returns (int256 freeCollateralByRatio);\\n\\n    /// @notice Get array of collateral token addresses that trader has\\n    /// @return collateralTokens array of collateral token addresses\\n    function getCollateralTokens(address trader) external view returns (address[] memory collateralTokens);\\n\\n    /// @notice Get settlement token address\\n    /// @dev We assume the settlement token should match the denominator of the price oracle.\\n    /// i.e. if the settlement token is USDC, then the oracle should be priced in USD\\n    /// @return settlementToken The address of settlement token\\n    function getSettlementToken() external view returns (address settlementToken);\\n\\n    /// @notice Check if a given trader's collateral token can be liquidated, liquidation criteria:\\n    ///         1. margin ratio falls below maintenance threshold + 20bps (maintenanceMarginRatioBuffer)\\n    ///         2. USDC debt (USDC balance + Total Unrealized PnL) > accountValue * debtAccountValueRatio\\n    ///         3. USDC debt (USDC balance + Total Unrealized PnL) > debtThreshold\\n    /// @param trader The address of the trader\\n    /// @return true if the trader can be liquidated\\n    function isLiquidatable(address trader) external view returns (bool);\\n\\n    /// @notice Get trader's max liquidatable collateral amount by given settlement token amount\\n    /// @param token The address of the token of the trader's collateral\\n    /// @param settlementTokenAmountX10_D The amount of settlement token the liquidator wants to pay\\n    /// @return collateralTokenAmount The settlement token amount the liquidator can get\\n    function getLiquidationAmountOut(address token, uint256 settlementTokenAmountX10_D)\\n        external\\n        view\\n        returns (uint256 collateralTokenAmount);\\n\\n    /// @notice Get trader's max liquidatable settlement token amount by given collateral token amount\\n    /// @param token The address of the token of the trader's collateral\\n    /// @param collateralTokenAmount The amount of collateral token to be liquidated\\n    /// @return settlementTokenAmountX10_D The settlement token amount the liquidator needs to pay\\n    function getLiquidationAmountIn(address token, uint256 collateralTokenAmount)\\n        external\\n        view\\n        returns (uint256 settlementTokenAmountX10_D);\\n\\n    /// @notice Get trader's max liquidatable amounts by given collateral token\\n    /// @param trader The address of trader\\n    /// @param token The address of the token of the trader's collateral\\n    /// @return maxSettlementTokenAmountX10_D The maximum settlement token amount\\n    ///         the liquidator needs to pay to liquidate the trader's collateral token\\n    /// @return maxCollateralTokenAmount The maximum collateral token amount of trader that can be liquidated\\n    function getMaxLiquidationAmounts(address trader, address token)\\n        external\\n        view\\n        returns (uint256 maxSettlementTokenAmountX10_D, uint256 maxCollateralTokenAmount);\\n\\n    /// @notice Get maintenance margin ratio for collateral liquidation\\n    /// @return the maintenance margin ratio for collateral liquidation\\n    function getCollateralMmRatio() external view returns (uint24);\\n\\n    /// @notice Get settlement token decimals\\n    /// @dev cached the settlement token's decimal for gas optimization\\n    /// @return decimals The decimals of settlement token\\n    function decimals() external view returns (uint8 decimals);\\n\\n    /// @notice Get the debt amount in vault\\n    /// @return debtAmount The debt amount\\n    function getTotalDebt() external view returns (uint256 debtAmount);\\n\\n    /// @notice Get `ClearingHouseConfig` contract address\\n    /// @return clearingHouseConfig The address of `ClearingHouseConfig` contract\\n    function getClearingHouseConfig() external view returns (address clearingHouseConfig);\\n\\n    /// @notice Get `AccountBalance` contract address\\n    /// @return accountBalance The address of `AccountBalance` contract\\n    function getAccountBalance() external view returns (address accountBalance);\\n\\n    /// @notice Get `InsuranceFund` contract address\\n    /// @return insuranceFund The address of `InsuranceFund` contract\\n    function getInsuranceFund() external view returns (address);\\n\\n    /// @notice Get `Exchange` contract address\\n    /// @return exchange The address of `Exchange` contract\\n    function getExchange() external view returns (address);\\n\\n    /// @notice Get `ClearingHouse` contract address\\n    /// @return clearingHouse The address of `ClearingHouse` contract\\n    function getClearingHouse() external view returns (address);\\n\\n    /// @notice Get `CollateralManager` contract address\\n    /// @return clearingHouse The address of `CollateralManager` contract\\n    function getCollateralManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1c731658376efeaeb136c6a8fc03d070ed02482fdeaa5f182153309c8237d146\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/ICollateralManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\ninterface ICollateralManager {\\n    function isCollateral(address token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbeb3ef8ecf9608f250a79e697e5e00a14bc305600cfacb63652acf4085a3d97c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Liquidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IUniswapV3SwapCallback } from \\\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\\\";\\nimport { IUniswapV3Pool } from \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport { TickMath } from \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport { IPeripheryImmutableState } from \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\\\";\\nimport { ISwapRouter } from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport { PoolAddress } from \\\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\\\";\\nimport { IVault } from \\\"@perp/curie-contract/contracts/interface/IVault.sol\\\";\\n// TODO: use @perp/curie-contract once ICollateralManager is released\\nimport { ICollateralManager } from \\\"./ICollateralManager.sol\\\";\\n\\ncontract Liquidator is IUniswapV3SwapCallback, Ownable {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using SignedSafeMath for int256;\\n    using SafeCast for int256;\\n    using SafeERC20 for IERC20;\\n\\n    struct SwapCallbackData {\\n        bytes path;\\n        address trader;\\n        address baseToken;\\n        address pool;\\n        uint256 minSettlementAmount;\\n    }\\n\\n    struct Hop {\\n        address tokenIn;\\n        uint24 fee;\\n        address tokenOut;\\n    }\\n\\n    address internal _vault;\\n    address internal _swapRouter;\\n    address internal _permissivePairAddress = address(1);\\n\\n    //\\n    // EXTERNAL NON-VIEW\\n    //\\n\\n    constructor(address vaultArg, address swapRouter) {\\n        _vault = vaultArg;\\n        _swapRouter = swapRouter;\\n\\n        address settlementToken = IVault(_vault).getSettlementToken();\\n        IERC20(settlementToken).safeApprove(vaultArg, uint256(-1));\\n    }\\n\\n    function withdraw(address token) external onlyOwner {\\n        IERC20(token).safeTransfer(owner(), IERC20(token).balanceOf(address(this)));\\n    }\\n\\n    /// @inheritdoc IUniswapV3SwapCallback\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata _data\\n    ) external override {\\n        // check the caller is the permissivePairAddress\\n        // L_NPPA: not permissive pair address\\n        require(msg.sender == _permissivePairAddress, \\\"L_NPPA\\\");\\n\\n        // swaps entirely within 0-liquidity regions are not supported -> 0 swap is forbidden\\n        // LH_F0S: forbidden 0 swap\\n        require((amount0Delta > 0 && amount1Delta < 0) || (amount0Delta < 0 && amount1Delta > 0), \\\"L_F0S\\\");\\n\\n        SwapCallbackData memory data = abi.decode(_data, (SwapCallbackData));\\n\\n        // positive: liquidator give pool the collateral\\n        // negative: liquidator receive from pool (pathTail[0], or USDC)\\n        // liquidator to liquidate the exact amount of collateral token he's expected to send back to the pool\\n        (uint256 collateralAmount, uint256 firstHopOutAmount, address collateralToken, address firstHopOutToken) =\\n            amount0Delta > amount1Delta\\n                ? (\\n                    uint256(amount0Delta),\\n                    uint256(-amount1Delta),\\n                    IUniswapV3Pool(data.pool).token0(),\\n                    IUniswapV3Pool(data.pool).token1()\\n                )\\n                : (\\n                    uint256(amount1Delta),\\n                    uint256(-amount0Delta),\\n                    IUniswapV3Pool(data.pool).token1(),\\n                    IUniswapV3Pool(data.pool).token0()\\n                );\\n\\n        if (data.path.length > 0) {\\n            // multi-hop, perform the rest hops\\n            IERC20(firstHopOutToken).safeApprove(_swapRouter, firstHopOutAmount);\\n            ISwapRouter.ExactInputParams memory params =\\n                ISwapRouter.ExactInputParams({\\n                    path: data.path, // abi.encodePacked(ETH, poolFee, USDC),\\n                    recipient: address(this),\\n                    deadline: block.timestamp,\\n                    amountIn: firstHopOutAmount,\\n                    amountOutMinimum: data.minSettlementAmount\\n                });\\n            ISwapRouter(_swapRouter).exactInput(params);\\n        } else {\\n            // single-hop, firstHopOutAmount = settlement token received from swap\\n            // L_LTMSTP: less than minSettlementTokenProfit\\n            require(firstHopOutAmount >= data.minSettlementAmount, \\\"L_LTMSTP\\\");\\n        }\\n\\n        IVault(_vault).liquidateCollateralExactOutput(data.trader, data.baseToken, collateralAmount);\\n\\n        // transfer the collateral to uniswap pool\\n        IERC20(collateralToken).safeTransfer(data.pool, collateralAmount);\\n    }\\n\\n    /// @notice Liquidate tradedr's collateral by using flash swap on uniswap v3\\n    /// @param trader The address of the liquidatable trader\\n    /// @param maxSettlementTokenSpent The maximum amount of the settlement token\\n    ///                                should be paid to the Vault\\n    /// @param minSettlementTokenProfit The minimum amount of the settlement token\\n    ///                                 should be earned (negative = allow liquidation at a loss)\\n    /// @param pathHead Path for swapping tokens\\n    ///                 For single swaps, it's somewhat like { tokenIn: eth, fee, tokenOut: usdc }\\n    ///                 For multihop swaps, it's somewhat like { tokenIn: perp, fee, tokenOut: eth }\\n    /// @param pathTail To fulfill multihop swaps, this is the path after `pathHead`\\n    ///                 For single swaps, directly pass `0x`\\n    ///                 For multihop swaps, it's somewhat like `abi.encodePacked(eth, fee, usdc)`\\n    function flashLiquidate(\\n        address trader,\\n        uint256 maxSettlementTokenSpent,\\n        int256 minSettlementTokenProfit,\\n        Hop memory pathHead,\\n        bytes memory pathTail\\n    ) external onlyOwner {\\n        (uint256 settlement, uint256 collateral) = IVault(_vault).getMaxLiquidationAmounts(trader, pathHead.tokenIn);\\n        // L_NL: not liquidatable\\n        require(settlement > 0, \\\"L_NL\\\");\\n\\n        if (settlement > maxSettlementTokenSpent) {\\n            collateral = IVault(_vault).getLiquidationAmountOut(pathHead.tokenIn, maxSettlementTokenSpent);\\n            settlement = maxSettlementTokenSpent;\\n        }\\n        bool zeroForOne = pathHead.tokenIn < pathHead.tokenOut;\\n        address pool = _getPool(pathHead.tokenIn, pathHead.tokenOut, pathHead.fee);\\n        int256 minSettlementAmount = settlement.toInt256().add(minSettlementTokenProfit);\\n        bytes memory data =\\n            abi.encode(\\n                SwapCallbackData({\\n                    path: pathTail,\\n                    trader: trader,\\n                    baseToken: pathHead.tokenIn,\\n                    pool: pool,\\n                    minSettlementAmount: minSettlementAmount < 0 ? 0 : minSettlementAmount.toUint256()\\n                })\\n            );\\n\\n        // set this variable to the pool address we're calling\\n        _permissivePairAddress = pool;\\n\\n        // call the swap, which will trigger the swap callback\\n        IUniswapV3Pool(pool).swap(\\n            address(this),\\n            zeroForOne,\\n            collateral.toInt256(),\\n            (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1),\\n            data\\n        );\\n\\n        // after swap, we set it back to zero\\n        _permissivePairAddress = address(1);\\n    }\\n\\n    //\\n    // EXETERNAL VIEW\\n    //\\n\\n    /// @notice Get the most profitable collateral from the liquidatable trader\\n    /// @param trader The address of the liquidatable trader\\n    /// @return targetCollateral The most profitable collateral from the liquidatable trader\\n    function getMaxProfitableCollateral(address trader) external view returns (address targetCollateral) {\\n        address[] memory collaterals = IVault(_vault).getCollateralTokens(trader);\\n        uint256 collateralLength = collaterals.length;\\n        uint256 maxValue = 0;\\n        targetCollateral = address(0x0);\\n        for (uint256 i = 0; i < collateralLength; i++) {\\n            (uint256 value, ) = IVault(_vault).getMaxLiquidationAmounts(trader, collaterals[i]);\\n            if (value > maxValue) {\\n                maxValue = value;\\n                targetCollateral = collaterals[i];\\n            }\\n        }\\n    }\\n\\n    /// @notice Get the most profitable collateral from the liquidatable trader and only accept specific collaterals\\n    /// @param trader The address of the liquidatable trader\\n    /// @param collateralList Specific collateral list\\n    /// @return targetCollateral The most profitable collateral from the liquidatable trader\\n    function getMaxProfitableCollateralFromCollaterals(address trader, address[] memory collateralList)\\n        external\\n        view\\n        returns (address targetCollateral)\\n    {\\n        uint256 collateralLength = collateralList.length;\\n        uint256 maxValue = 0;\\n        targetCollateral = address(0x0);\\n        for (uint256 i = 0; i < collateralLength; i++) {\\n            if (!ICollateralManager(IVault(_vault).getCollateralManager()).isCollateral(collateralList[i])) {\\n                // skip the collateral if not registered\\n                continue;\\n            }\\n            (uint256 value, ) = IVault(_vault).getMaxLiquidationAmounts(trader, collateralList[i]);\\n            if (value > maxValue) {\\n                maxValue = value;\\n                targetCollateral = collateralList[i];\\n            }\\n        }\\n    }\\n\\n    function getVault() external view returns (address) {\\n        return _vault;\\n    }\\n\\n    //\\n    // PRIVATE VIEW\\n    //\\n\\n    function _getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) private view returns (address) {\\n        return\\n            PoolAddress.computeAddress(\\n                IPeripheryImmutableState(_swapRouter).factory(),\\n                PoolAddress.getPoolKey(tokenA, tokenB, fee)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xe838d7e9c21f2fcd44911c1afb6c4ca6bab2dde09b3ac40a8c4d85ca95493b00\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080604052600380546001600160a01b03191660011790553480156200002457600080fd5b50604051620024c6380380620024c68339810160408190526200004791620005c7565b60006200005362000178565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b038085166001600160a01b0319928316179283905560028054858316931692909217909155604080516312803c7d60e01b81529051600093909216916312803c7d91600480820192602092909190829003018186803b1580156200010b57600080fd5b505afa15801562000120573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001469190620005aa565b90506200016f83600019836001600160a01b03166200017c60201b62000ed6179092919060201c565b505050620005fe565b3390565b80158062000206575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015620001d657600080fd5b505afa158015620001eb573d6000803e3d6000fd5b505050506040513d60208110156200020257600080fd5b5051155b620002435760405162461bcd60e51b8152600401808060200182810382526036815260200180620024906036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200029b918591620002a016565b505050565b6000620002fc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200035c60201b62000fee179092919060201c565b8051909150156200029b578080602001905160208110156200031d57600080fd5b50516200029b5760405162461bcd60e51b815260040180806020018281038252602a81526020018062002466602a913960400191505060405180910390fd5b60606200036d848460008562000377565b90505b9392505050565b606082471015620003ba5760405162461bcd60e51b8152600401808060200182810382526026815260200180620024406026913960400191505060405180910390fd5b620003c585620004de565b62000417576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310620004575780518252601f19909201916020918201910162000436565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114620004bb576040519150601f19603f3d011682016040523d82523d6000602084013e620004c0565b606091505b509092509050620004d3828286620004e8565b979650505050505050565b803b15155b919050565b60608315620004f957508162000370565b8251156200050a5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620005565781810151838201526020016200053c565b50505050905090810190601f168015620005845780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b80516001600160a01b0381168114620004e357600080fd5b600060208284031215620005bc578081fd5b620003708262000592565b60008060408385031215620005da578081fd5b620005e58362000592565b9150620005f56020840162000592565b90509250929050565b611e32806200060e6000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c806351cff8d91461008857806366d509231461009d578063715018a6146100c657806372feb49e146100ce5780638d928af8146100e15780638da5cb5b146100e9578063afa0b15d146100f1578063f2fde38b14610104578063fa461e3314610117575b600080fd5b61009b61009636600461167f565b61012a565b005b6100b06100ab36600461167f565b610227565b6040516100bd9190611ab5565b60405180910390f35b61009b610395565b6100b06100dc3660046116b7565b610441565b6100b0610640565b6100b061064f565b61009b6100ff366004611769565b61065e565b61009b61011236600461167f565b6109b2565b61009b610125366004611920565b610ab4565b610132611007565b6001600160a01b031661014361064f565b6001600160a01b03161461018c576040805162461bcd60e51b81526020600482018190526024820152600080516020611d55833981519152604482015290519081900360640190fd5b61022461019761064f565b6040516370a0823160e01b81526001600160a01b038416906370a08231906101c3903090600401611ab5565b60206040518083038186803b1580156101db57600080fd5b505afa1580156101ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102139190611a52565b6001600160a01b038416919061100b565b50565b6001546040516376c81fbd60e11b815260009182916001600160a01b039091169063ed903f7a9061025c908690600401611ab5565b60006040518083038186803b15801561027457600080fd5b505afa158015610288573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102b09190810190611845565b80516000935090915082805b8281101561038c5760015484516000916001600160a01b03169063b334b5ad9089908890869081106102ea57fe5b60200260200101516040518363ffffffff1660e01b815260040161030f929190611ac9565b604080518083038186803b15801561032657600080fd5b505afa15801561033a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035e91906118fd565b509050828111156103835780925084828151811061037857fe5b602002602001015195505b506001016102bc565b50505050919050565b61039d611007565b6001600160a01b03166103ae61064f565b6001600160a01b0316146103f7576040805162461bcd60e51b81526020600482018190526024820152600080516020611d55833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b805160009081805b8281101561063757600160009054906101000a90046001600160a01b03166001600160a01b031663dfa441be6040518163ffffffff1660e01b815260040160206040518083038186803b15801561049f57600080fd5b505afa1580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d7919061169b565b6001600160a01b0316630ee21e548683815181106104f157fe5b60200260200101516040518263ffffffff1660e01b81526004016105159190611ab5565b60206040518083038186803b15801561052d57600080fd5b505afa158015610541573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056591906118dd565b61056e5761062f565b60015485516000916001600160a01b03169063b334b5ad90899089908690811061059457fe5b60200260200101516040518363ffffffff1660e01b81526004016105b9929190611ac9565b604080518083038186803b1580156105d057600080fd5b505afa1580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060891906118fd565b5090508281111561062d5780925085828151811061062257fe5b602002602001015194505b505b600101610449565b50505092915050565b6001546001600160a01b031690565b6000546001600160a01b031690565b610666611007565b6001600160a01b031661067761064f565b6001600160a01b0316146106c0576040805162461bcd60e51b81526020600482018190526024820152600080516020611d55833981519152604482015290519081900360640190fd5b600154825160405163b334b5ad60e01b815260009283926001600160a01b039091169163b334b5ad916106f8918b9190600401611ac9565b604080518083038186803b15801561070f57600080fd5b505afa158015610723573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074791906118fd565b91509150600082116107745760405162461bcd60e51b815260040161076b90611b9d565b60405180910390fd5b85821115610804576001548451604051639401a1bf60e01b81526001600160a01b0390921691639401a1bf916107ae918a90600401611b42565b60206040518083038186803b1580156107c657600080fd5b505afa1580156107da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fe9190611a52565b90508591505b6040840151845160208601516001600160a01b03808416908316109260009261082f9290919061105d565b9050600061084688610840876110f8565b90611144565b905060006040518060a001604052808881526020018c6001600160a01b0316815260200189600001516001600160a01b03168152602001846001600160a01b03168152602001600084126108a25761089d846111a9565b6108a5565b60005b90526040516108b79190602001611c32565b60408051808303601f19018152919052600380546001600160a01b0319166001600160a01b03861690811790915590915063128acb0830866108f8896110f8565b886109175773fffd8963efd1fc6a506488495d951d5263988d2561091e565b6401000276a45b866040518663ffffffff1660e01b815260040161093f959493929190611b07565b6040805180830381600087803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099091906118fd565b5050600380546001600160a01b03191660011790555050505050505050505050565b6109ba611007565b6001600160a01b03166109cb61064f565b6001600160a01b031614610a14576040805162461bcd60e51b81526020600482018190526024820152600080516020611d55833981519152604482015290519081900360640190fd5b6001600160a01b038116610a595760405162461bcd60e51b8152600401808060200182810382526026815260200180611ce86026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b03163314610ade5760405162461bcd60e51b815260040161076b90611b7d565b600084138015610aee5750600083125b80610b045750600084128015610b045750600083135b610b205760405162461bcd60e51b815260040161076b90611bbb565b6000610b2e8284018461199a565b9050600080600080878913610c3157878960000386606001516001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7f57600080fd5b505afa158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb7919061169b565b87606001516001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf457600080fd5b505afa158015610c08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2c919061169b565b610d20565b888860000386606001516001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7357600080fd5b505afa158015610c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cab919061169b565b87606001516001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610ce857600080fd5b505afa158015610cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d20919061169b565b8851519397509195509350915015610dfe57600254610d4c906001600160a01b03838116911685610ed6565b6040805160a0810182528651815230602082015242818301526060810185905260808088015190820152600254915163c04b8d5960e01b815290916001600160a01b03169063c04b8d5990610da5908490600401611bda565b602060405180830381600087803b158015610dbf57600080fd5b505af1158015610dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df79190611a52565b5050610e22565b8460800151831015610e225760405162461bcd60e51b815260040161076b90611b5b565b60015460208601516040808801519051631968623560e21b81526001600160a01b03909316926365a188d492610e5e9290918990600401611ae3565b602060405180830381600087803b158015610e7857600080fd5b505af1158015610e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb09190611a52565b506060850151610ecb906001600160a01b038416908661100b565b505050505050505050565b801580610f5c575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015610f2e57600080fd5b505afa158015610f42573d6000803e3d6000fd5b505050506040513d6020811015610f5857600080fd5b5051155b610f975760405162461bcd60e51b8152600401808060200182810382526036815260200180611dc76036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610fe9908490611200565b505050565b6060610ffd84846000856112b1565b90505b9392505050565b3390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610fe9908490611200565b6000610ffd600260009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b057600080fd5b505afa1580156110c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e8919061169b565b6110f386868661140c565b611462565b6000600160ff1b821061113c5760405162461bcd60e51b8152600401808060200182810382526028815260200180611d756028913960400191505060405180910390fd5b50805b919050565b60008282018183128015906111595750838112155b8061116e575060008312801561116e57508381125b6110005760405162461bcd60e51b8152600401808060200182810382526021815260200180611d0e6021913960400191505060405180910390fd5b60008082121561113c576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b6000611255826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610fee9092919063ffffffff16565b805190915015610fe95780806020019051602081101561127457600080fd5b5051610fe95760405162461bcd60e51b815260040180806020018281038252602a815260200180611d9d602a913960400191505060405180910390fd5b6060824710156112f25760405162461bcd60e51b8152600401808060200182810382526026815260200180611d2f6026913960400191505060405180910390fd5b6112fb85611546565b61134c576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b6020831061138a5780518252601f19909201916020918201910161136b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146113ec576040519150601f19603f3d011682016040523d82523d6000602084013e6113f1565b606091505b509150915061140182828661154c565b979650505050505050565b6114146115f0565b826001600160a01b0316846001600160a01b03161115611432579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600081602001516001600160a01b031682600001516001600160a01b03161061148a57600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301206001600160f81b031960a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b3b151590565b6060831561155b575081611000565b82511561156b5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156115b557818101518382015260200161159d565b50505050905090810190601f1680156115e25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604080516060810182526000808252602082018190529181019190915290565b803561113f81611cd2565b600082601f83011261162b578081fd5b81356001600160401b0381111561163e57fe5b611651601f8201601f1916602001611c92565b818152846020838601011115611665578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611690578081fd5b813561100081611cd2565b6000602082840312156116ac578081fd5b815161100081611cd2565b600080604083850312156116c9578081fd5b82356116d481611cd2565b91506020838101356001600160401b038111156116ef578283fd5b8401601f810186136116ff578283fd5b803561171261170d82611cb5565b611c92565b81815283810190838501858402850186018a101561172e578687fd5b8694505b8385101561175957803561174581611cd2565b835260019490940193918501918501611732565b5080955050505050509250929050565b600080600080600085870360e0811215611781578182fd5b863561178c81611cd2565b955060208701359450604087013593506060605f19820112156117ad578182fd5b50604051606081016001600160401b0382821081831117156117cb57fe5b81604052606089013591506117df82611cd2565b90825260808801359062ffffff821682146117f8578384fd5b81602084015260a0890135915061180e82611cd2565b81604084015282945060c089013592508083111561182a578384fd5b50506118388882890161161b565b9150509295509295909350565b60006020808385031215611857578182fd5b82516001600160401b0381111561186c578283fd5b8301601f8101851361187c578283fd5b805161188a61170d82611cb5565b81815283810190838501858402850186018910156118a6578687fd5b8694505b838510156118d15780516118bd81611cd2565b8352600194909401939185019185016118aa565b50979650505050505050565b6000602082840312156118ee578081fd5b81518015158114611000578182fd5b6000806040838503121561190f578182fd5b505080516020909101519092909150565b60008060008060608587031215611935578182fd5b843593506020850135925060408501356001600160401b0380821115611959578384fd5b818701915087601f83011261196c578384fd5b81358181111561197a578485fd5b88602082850101111561198b578485fd5b95989497505060200194505050565b6000602082840312156119ab578081fd5b81356001600160401b03808211156119c1578283fd5b9083019060a082860312156119d4578283fd5b60405160a0810181811083821117156119e957fe5b6040528235828111156119fa578485fd5b611a068782860161161b565b825250611a1560208401611610565b6020820152611a2660408401611610565b6040820152611a3760608401611610565b60608201526080830135608082015280935050505092915050565b600060208284031215611a63578081fd5b5051919050565b60008151808452815b81811015611a8f57602081850181015186830182015201611a73565b81811115611aa05782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0386811682528515156020830152604082018590528316606082015260a06080820181905260009061140190830184611a6a565b6001600160a01b03929092168252602082015260400190565b60208082526008908201526704c5f4c544d5354560c41b604082015260600190565b6020808252600690820152654c5f4e50504160d01b604082015260600190565b6020808252600490820152631317d39360e21b604082015260600190565b6020808252600590820152644c5f46305360d81b604082015260600190565b600060208252825160a06020840152611bf660c0840182611a6a565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b600060208252825160a06020840152611c4e60c0840182611a6a565b9050602084015160018060a01b0380821660408601528060408701511660608601528060608701511660808601525050608084015160a08401528091505092915050565b6040518181016001600160401b0381118282101715611cad57fe5b604052919050565b60006001600160401b03821115611cc857fe5b5060209081020190565b6001600160a01b038116811461022457600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657253616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122020619ede2bbb72d0e48390bce6af6e58468e8c844a6f5a2033769cca4002981c64736f6c63430007060033416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100835760003560e01c806351cff8d91461008857806366d509231461009d578063715018a6146100c657806372feb49e146100ce5780638d928af8146100e15780638da5cb5b146100e9578063afa0b15d146100f1578063f2fde38b14610104578063fa461e3314610117575b600080fd5b61009b61009636600461167f565b61012a565b005b6100b06100ab36600461167f565b610227565b6040516100bd9190611ab5565b60405180910390f35b61009b610395565b6100b06100dc3660046116b7565b610441565b6100b0610640565b6100b061064f565b61009b6100ff366004611769565b61065e565b61009b61011236600461167f565b6109b2565b61009b610125366004611920565b610ab4565b610132611007565b6001600160a01b031661014361064f565b6001600160a01b03161461018c576040805162461bcd60e51b81526020600482018190526024820152600080516020611d55833981519152604482015290519081900360640190fd5b61022461019761064f565b6040516370a0823160e01b81526001600160a01b038416906370a08231906101c3903090600401611ab5565b60206040518083038186803b1580156101db57600080fd5b505afa1580156101ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102139190611a52565b6001600160a01b038416919061100b565b50565b6001546040516376c81fbd60e11b815260009182916001600160a01b039091169063ed903f7a9061025c908690600401611ab5565b60006040518083038186803b15801561027457600080fd5b505afa158015610288573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102b09190810190611845565b80516000935090915082805b8281101561038c5760015484516000916001600160a01b03169063b334b5ad9089908890869081106102ea57fe5b60200260200101516040518363ffffffff1660e01b815260040161030f929190611ac9565b604080518083038186803b15801561032657600080fd5b505afa15801561033a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035e91906118fd565b509050828111156103835780925084828151811061037857fe5b602002602001015195505b506001016102bc565b50505050919050565b61039d611007565b6001600160a01b03166103ae61064f565b6001600160a01b0316146103f7576040805162461bcd60e51b81526020600482018190526024820152600080516020611d55833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b805160009081805b8281101561063757600160009054906101000a90046001600160a01b03166001600160a01b031663dfa441be6040518163ffffffff1660e01b815260040160206040518083038186803b15801561049f57600080fd5b505afa1580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d7919061169b565b6001600160a01b0316630ee21e548683815181106104f157fe5b60200260200101516040518263ffffffff1660e01b81526004016105159190611ab5565b60206040518083038186803b15801561052d57600080fd5b505afa158015610541573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056591906118dd565b61056e5761062f565b60015485516000916001600160a01b03169063b334b5ad90899089908690811061059457fe5b60200260200101516040518363ffffffff1660e01b81526004016105b9929190611ac9565b604080518083038186803b1580156105d057600080fd5b505afa1580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060891906118fd565b5090508281111561062d5780925085828151811061062257fe5b602002602001015194505b505b600101610449565b50505092915050565b6001546001600160a01b031690565b6000546001600160a01b031690565b610666611007565b6001600160a01b031661067761064f565b6001600160a01b0316146106c0576040805162461bcd60e51b81526020600482018190526024820152600080516020611d55833981519152604482015290519081900360640190fd5b600154825160405163b334b5ad60e01b815260009283926001600160a01b039091169163b334b5ad916106f8918b9190600401611ac9565b604080518083038186803b15801561070f57600080fd5b505afa158015610723573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074791906118fd565b91509150600082116107745760405162461bcd60e51b815260040161076b90611b9d565b60405180910390fd5b85821115610804576001548451604051639401a1bf60e01b81526001600160a01b0390921691639401a1bf916107ae918a90600401611b42565b60206040518083038186803b1580156107c657600080fd5b505afa1580156107da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fe9190611a52565b90508591505b6040840151845160208601516001600160a01b03808416908316109260009261082f9290919061105d565b9050600061084688610840876110f8565b90611144565b905060006040518060a001604052808881526020018c6001600160a01b0316815260200189600001516001600160a01b03168152602001846001600160a01b03168152602001600084126108a25761089d846111a9565b6108a5565b60005b90526040516108b79190602001611c32565b60408051808303601f19018152919052600380546001600160a01b0319166001600160a01b03861690811790915590915063128acb0830866108f8896110f8565b886109175773fffd8963efd1fc6a506488495d951d5263988d2561091e565b6401000276a45b866040518663ffffffff1660e01b815260040161093f959493929190611b07565b6040805180830381600087803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099091906118fd565b5050600380546001600160a01b03191660011790555050505050505050505050565b6109ba611007565b6001600160a01b03166109cb61064f565b6001600160a01b031614610a14576040805162461bcd60e51b81526020600482018190526024820152600080516020611d55833981519152604482015290519081900360640190fd5b6001600160a01b038116610a595760405162461bcd60e51b8152600401808060200182810382526026815260200180611ce86026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b03163314610ade5760405162461bcd60e51b815260040161076b90611b7d565b600084138015610aee5750600083125b80610b045750600084128015610b045750600083135b610b205760405162461bcd60e51b815260040161076b90611bbb565b6000610b2e8284018461199a565b9050600080600080878913610c3157878960000386606001516001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7f57600080fd5b505afa158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb7919061169b565b87606001516001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf457600080fd5b505afa158015610c08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2c919061169b565b610d20565b888860000386606001516001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7357600080fd5b505afa158015610c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cab919061169b565b87606001516001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610ce857600080fd5b505afa158015610cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d20919061169b565b8851519397509195509350915015610dfe57600254610d4c906001600160a01b03838116911685610ed6565b6040805160a0810182528651815230602082015242818301526060810185905260808088015190820152600254915163c04b8d5960e01b815290916001600160a01b03169063c04b8d5990610da5908490600401611bda565b602060405180830381600087803b158015610dbf57600080fd5b505af1158015610dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df79190611a52565b5050610e22565b8460800151831015610e225760405162461bcd60e51b815260040161076b90611b5b565b60015460208601516040808801519051631968623560e21b81526001600160a01b03909316926365a188d492610e5e9290918990600401611ae3565b602060405180830381600087803b158015610e7857600080fd5b505af1158015610e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb09190611a52565b506060850151610ecb906001600160a01b038416908661100b565b505050505050505050565b801580610f5c575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015610f2e57600080fd5b505afa158015610f42573d6000803e3d6000fd5b505050506040513d6020811015610f5857600080fd5b5051155b610f975760405162461bcd60e51b8152600401808060200182810382526036815260200180611dc76036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610fe9908490611200565b505050565b6060610ffd84846000856112b1565b90505b9392505050565b3390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610fe9908490611200565b6000610ffd600260009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b057600080fd5b505afa1580156110c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e8919061169b565b6110f386868661140c565b611462565b6000600160ff1b821061113c5760405162461bcd60e51b8152600401808060200182810382526028815260200180611d756028913960400191505060405180910390fd5b50805b919050565b60008282018183128015906111595750838112155b8061116e575060008312801561116e57508381125b6110005760405162461bcd60e51b8152600401808060200182810382526021815260200180611d0e6021913960400191505060405180910390fd5b60008082121561113c576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b6000611255826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610fee9092919063ffffffff16565b805190915015610fe95780806020019051602081101561127457600080fd5b5051610fe95760405162461bcd60e51b815260040180806020018281038252602a815260200180611d9d602a913960400191505060405180910390fd5b6060824710156112f25760405162461bcd60e51b8152600401808060200182810382526026815260200180611d2f6026913960400191505060405180910390fd5b6112fb85611546565b61134c576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b6020831061138a5780518252601f19909201916020918201910161136b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146113ec576040519150601f19603f3d011682016040523d82523d6000602084013e6113f1565b606091505b509150915061140182828661154c565b979650505050505050565b6114146115f0565b826001600160a01b0316846001600160a01b03161115611432579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600081602001516001600160a01b031682600001516001600160a01b03161061148a57600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301206001600160f81b031960a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b3b151590565b6060831561155b575081611000565b82511561156b5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156115b557818101518382015260200161159d565b50505050905090810190601f1680156115e25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604080516060810182526000808252602082018190529181019190915290565b803561113f81611cd2565b600082601f83011261162b578081fd5b81356001600160401b0381111561163e57fe5b611651601f8201601f1916602001611c92565b818152846020838601011115611665578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215611690578081fd5b813561100081611cd2565b6000602082840312156116ac578081fd5b815161100081611cd2565b600080604083850312156116c9578081fd5b82356116d481611cd2565b91506020838101356001600160401b038111156116ef578283fd5b8401601f810186136116ff578283fd5b803561171261170d82611cb5565b611c92565b81815283810190838501858402850186018a101561172e578687fd5b8694505b8385101561175957803561174581611cd2565b835260019490940193918501918501611732565b5080955050505050509250929050565b600080600080600085870360e0811215611781578182fd5b863561178c81611cd2565b955060208701359450604087013593506060605f19820112156117ad578182fd5b50604051606081016001600160401b0382821081831117156117cb57fe5b81604052606089013591506117df82611cd2565b90825260808801359062ffffff821682146117f8578384fd5b81602084015260a0890135915061180e82611cd2565b81604084015282945060c089013592508083111561182a578384fd5b50506118388882890161161b565b9150509295509295909350565b60006020808385031215611857578182fd5b82516001600160401b0381111561186c578283fd5b8301601f8101851361187c578283fd5b805161188a61170d82611cb5565b81815283810190838501858402850186018910156118a6578687fd5b8694505b838510156118d15780516118bd81611cd2565b8352600194909401939185019185016118aa565b50979650505050505050565b6000602082840312156118ee578081fd5b81518015158114611000578182fd5b6000806040838503121561190f578182fd5b505080516020909101519092909150565b60008060008060608587031215611935578182fd5b843593506020850135925060408501356001600160401b0380821115611959578384fd5b818701915087601f83011261196c578384fd5b81358181111561197a578485fd5b88602082850101111561198b578485fd5b95989497505060200194505050565b6000602082840312156119ab578081fd5b81356001600160401b03808211156119c1578283fd5b9083019060a082860312156119d4578283fd5b60405160a0810181811083821117156119e957fe5b6040528235828111156119fa578485fd5b611a068782860161161b565b825250611a1560208401611610565b6020820152611a2660408401611610565b6040820152611a3760608401611610565b60608201526080830135608082015280935050505092915050565b600060208284031215611a63578081fd5b5051919050565b60008151808452815b81811015611a8f57602081850181015186830182015201611a73565b81811115611aa05782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0386811682528515156020830152604082018590528316606082015260a06080820181905260009061140190830184611a6a565b6001600160a01b03929092168252602082015260400190565b60208082526008908201526704c5f4c544d5354560c41b604082015260600190565b6020808252600690820152654c5f4e50504160d01b604082015260600190565b6020808252600490820152631317d39360e21b604082015260600190565b6020808252600590820152644c5f46305360d81b604082015260600190565b600060208252825160a06020840152611bf660c0840182611a6a565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b600060208252825160a06020840152611c4e60c0840182611a6a565b9050602084015160018060a01b0380821660408601528060408701511660608601528060608701511660808601525050608084015160a08401528091505092915050565b6040518181016001600160401b0381118282101715611cad57fe5b604052919050565b60006001600160401b03821115611cc857fe5b5060209081020190565b6001600160a01b038116811461022457600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657253616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122020619ede2bbb72d0e48390bce6af6e58468e8c844a6f5a2033769cca4002981c64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "flashLiquidate(address,uint256,int256,(address,uint24,address),bytes)": {
        "params": {
          "maxSettlementTokenSpent": "The maximum amount of the settlement token                                should be paid to the Vault",
          "minSettlementTokenProfit": "The minimum amount of the settlement token                                 should be earned (negative = allow liquidation at a loss)",
          "pathHead": "Path for swapping tokens                 For single swaps, it's somewhat like { tokenIn: eth, fee, tokenOut: usdc }                 For multihop swaps, it's somewhat like { tokenIn: perp, fee, tokenOut: eth }",
          "pathTail": "To fulfill multihop swaps, this is the path after `pathHead`                 For single swaps, directly pass `0x`                 For multihop swaps, it's somewhat like `abi.encodePacked(eth, fee, usdc)`",
          "trader": "The address of the liquidatable trader"
        }
      },
      "getMaxProfitableCollateral(address)": {
        "params": {
          "trader": "The address of the liquidatable trader"
        },
        "returns": {
          "targetCollateral": "The most profitable collateral from the liquidatable trader"
        }
      },
      "getMaxProfitableCollateralFromCollaterals(address,address[])": {
        "params": {
          "collateralList": "Specific collateral list",
          "trader": "The address of the liquidatable trader"
        },
        "returns": {
          "targetCollateral": "The most profitable collateral from the liquidatable trader"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uniswapV3SwapCallback(int256,int256,bytes)": {
        "details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
        "params": {
          "amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
          "amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
          "data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "flashLiquidate(address,uint256,int256,(address,uint24,address),bytes)": {
        "notice": "Liquidate tradedr's collateral by using flash swap on uniswap v3"
      },
      "getMaxProfitableCollateral(address)": {
        "notice": "Get the most profitable collateral from the liquidatable trader"
      },
      "getMaxProfitableCollateralFromCollaterals(address,address[])": {
        "notice": "Get the most profitable collateral from the liquidatable trader and only accept specific collaterals"
      },
      "uniswapV3SwapCallback(int256,int256,bytes)": {
        "notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Liquidator.sol:Liquidator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3720,
        "contract": "contracts/Liquidator.sol:Liquidator",
        "label": "_vault",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3722,
        "contract": "contracts/Liquidator.sol:Liquidator",
        "label": "_swapRouter",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3728,
        "contract": "contracts/Liquidator.sol:Liquidator",
        "label": "_permissivePairAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}